% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
InstanceGem is PassiveItem

constants:

   include blakston.khd

resources:

   InstanceGem_name_rsc = "instance gem"
   InstanceGem_icon_rsc = serappol.bgf
   InstanceGem_desc_rsc = "This gem pulses with dimensional energy. You sense that it leads to a place much like "
   InstanceGem_desc2_rsc = ", with "
   InstanceGem_desc3_rsc = "% experience gains and "
   InstanceGem_desc4_rsc = "% treasure drops."

   InstanceGem_portal = \
      "As you release the magic of the gem, a tear in the fabric of reality opens, "
      "pulling you through!"

classvars:

   vrName = InstanceGem_name_rsc
   vrIcon = InstanceGem_icon_rsc
   vrDesc = InstanceGem_desc_rsc

   viBulk = 10
   viWeight = 10
   viValue_average = 80

   viUse_type = ITEM_SINGLE_USE

properties:

   piDestinationClass = $
   piMonsterClass = $

   piDifficultyMod = 100
   piExperienceMod = 100
   piTreasureMod = 100

messages:

   Constructor()
   {
      piDifficultyMod = Random(50,150);
      piExperienceMod = Random(100,500);
      piTreasureMod = Random(100,500);
      
      piDestinationClass = &AltCrypt1;
      piMonsterClass = &Avar;
      
      propagate;
   }

   CanBeGivenToNPC()
   {
      return FALSE;
   }

   DoBaseDesc()
   {
      local rName;

      rName = "The crypt in Marion";

      ClearTempString();
      AppendTempString(vrDesc);
      AppendTempString(rName);
      AppendTempString(InstanceGem_desc2_rsc);
      AppendTempString(piExperienceMod);
      AppendTempString(InstanceGem_desc3_rsc);
      AppendTempString(piTreasureMod);
      AppendTempString(InstanceGem_desc4_rsc);

      return;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,400,2,1,2,6);  % Frames 1 to 6, and back to 1

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,400,2,1,2,6);  % Frames 1 to 6, and back to 1

      return;
   }

   SendInventoryAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,400,2,1,2,6);  % Frames 1 to 6, and back to 1

      return;
   }

   ReqNewApply()
   {
      return TRUE;
   }

   NewApplied(what = $,apply_on = $)
   {
      local poInstanceRoomMaintenance, iRID, oRoom;
      
      iRID = 0;
      poInstanceRoomMaintenance = Send(SYS,@GetInstanceRoomMaintenance);
      
      if poInstanceRoomMaintenance <> $
      {
         iRID = Send(poInstanceRoomMaintenance,@MakeInstanceRoom,#instance_class=piDestinationClass,#monster_class=piMonsterClass,
              #iDifficultyMod=piDifficultyMod,#iExperienceMod=piExperienceMod,#iTreasureMod=piTreasureMod);
      }
      
      if iRID <> 0
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
         if IsClass(what,&User)
         {
            Send(what,@MsgSendUser,#message_rsc=InstanceGem_portal);
            Send(oRoom,@Teleport,#what=what);
         }
      }
      
      Post(self,@Delete);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
