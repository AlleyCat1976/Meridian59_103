% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
InstancePortal is Portal

constants:

   include blakston.khd
   
   PORTAL_EXPIRATION_TIME = 60000

resources:

   InstancePortal_name_rsc = "A mysterious gateway"
   InstancePortal_icon_rsc = teleport.bgf
   InstancePortal_desc_rsc = "This gateway pulses with dimensional energy. You sense that it leads to a place much like "
   InstancePortal_desc2_rsc = ", with "
   InstancePortal_desc3_rsc = "% experience gains and "
   InstancePortal_desc4_rsc = "% treasure drops. You sense "
   InstancePortal_desc5_rsc = " life forces within."

   InstancePortal_appear = "A vast and mysterious force takes notice of your combat prowess, "
                            "and invites you to attempt a greater challenge..."
   InstancePortal_opening = "A strange portal appears, inviting all warriors brave enough to enter!"
   
   InstancePortal_closing = "The portal flickers and begins to draw imperceptibly in on itself."
   InstancePortal_closed = "The portal disappears."
   
   InstancePortal_teleport_rsc = "You rush through the open gateway, ready for combat!"

classvars:

   viObject_flags = MOVEON_TELEPORTER | DRAWFX_TRANSLUCENT_75

   viMaxDistance = 0

properties:

   piBaseRID = $
   piMonsterClass = $
   psMonsterName = $

   piDifficultyMod = 100
   piExperienceMod = 100
   piTreasureMod = 100
   
   ptPortalExpireTimer = $
   piDestRID = $

messages:

   Constructor(who=$,portal_room=$,portal_row=$,portal_col=$,portal_fine_row=$,portal_fine_col=$)
   {
      local poInstanceRoomMaintenance, iRandom, plRIDs, plMonsterClasses, i;

      piDifficultyMod = 100;
      piExperienceMod = 500;
      piTreasureMod = 500;
      
      if who <> $
         AND IsClass(who,&User)
         AND Send(who,@IsLoggedOn)
      {
         Send(who,@MsgSendUser,#message_rsc=InstancePortal_appear);
      }
      
      poInstanceRoomMaintenance = Send(SYS,@GetInstanceRoomMaintenance);
      
      if poInstanceRoomMaintenance <> $
      {
         plRIDs = Send(poInstanceRoomMaintenance,@GetValidRIDs);
         iRandom = Random(1,Length(plRIDs));
         piBaseRID = Nth(plRIDs,iRandom);
         
         plMonsterClasses = Send(poInstanceRoomMaintenance,@GetValidMonsterClasses);
         iRandom = Random(1,Length(plMonsterClasses));
         piMonsterClass = Nth(plMonsterClasses,iRandom);
      }
      else
      {
         piBaseRID = RID_THRONE1;
         piMonsterClass = &Avar;
      }
      
      for i in Send(SYS,@GetMonsterTemplates)
      {
         if IsClass(i,piMonsterClass)
         {
            psMonsterName = Send(i,@GetName);
         }
      }

      Post(self,@CreateDestination,#portal_room=portal_room,#portal_row=portal_row,#portal_col=portal_col,
                                   #portal_fine_row=portal_fine_row,#portal_fine_col=portal_fine_col);
      
      propagate;
   }
   
   CreateDestination(portal_room=$,portal_row=$,portal_col=$,portal_fine_row=$,portal_fine_col=$)
   {
      local poInstanceRoomMaintenance, iLocalRID, oDestRoom;
      
      if portal_room <> $
         AND portal_row <> $
         AND portal_col <> $
      {
         Send(portal_room,@NewHold,#what=self,
               #new_row=portal_row,#new_col=portal_col,
               #fine_row=portal_fine_row,#fine_col=portal_fine_col);
      }
      
      iLocalRID = 0;
      poInstanceRoomMaintenance = Send(SYS,@GetInstanceRoomMaintenance);
      
      if poInstanceRoomMaintenance <> $
      {
         iLocalRID = Send(poInstanceRoomMaintenance,@MakeInstanceRoom,
                     #iBaseRID=piBaseRID,
                     #monster_class=piMonsterClass,
                     #iDifficultyMod=piDifficultyMod,
                     #iExperienceMod=piExperienceMod,
                     #iTreasureMod=piTreasureMod);

         if iLocalRID = 0
         {
            Send(self,@Delete);
         }
         else
         {
            piDestRID = iLocalRID;
         }

         oDestRoom = Send(SYS,@FindRoomByNum,#num=piDestRID);
         Send(oDestRoom,@SetCreatorOriginData,#origin_room=Send(self,@GetOwner));
         ptPortalExpireTimer = CreateTimer(self,@PortalExpire,PORTAL_EXPIRATION_TIME);
         Send(self,@NotifyRoomPortalAppear);
      }

      return;
   }
   
   NotifyRoomPortalAppear()
   {
      local i, each_obj, oRoom;

      oRoom = Send(self,@GetOwner);
      
      for i in Send(oRoom,@GetPlActive)
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&User)
         {
            Send(each_obj,@MsgSendUser,#message_rsc=InstancePortal_opening);
         }
      }

      return;
   }

   TeleportSomething(what=$)
   {
      local oDestRoom;

      % Don't teleport if our time is up
      If NOT IsClass(what,&User)
         OR ptPortalExpireTimer = $
      {
         return;
      }
      
      oDestRoom = Send(SYS,@FindRoomByNum,#num=piDestRID);
      
      if oDestRoom <> $
         AND IsClass(oDestRoom,&InstanceRoom)
      {
         Send(what,@MsgSendUser,#message_rsc=InstancePortal_teleport_rsc);
         Send(oDestRoom,@Teleport,#what=what);
      }

      return;
   }
   
   PortalExpire()
   {
      ptPortalExpireTimer = $;
      
      Send(self,@Delete);
      
      return;
   }
   
   Delete()
   {
      local i, each_obj, oRoom, oDestRoom;
      
      if ptPortalExpireTimer <> $
      {
         DeleteTimer(ptPortalExpireTimer);
         ptPortalExpireTimer = $;
      }

      oRoom = Send(self,@GetOwner);
      
      for i in Send(oRoom,@GetPlActive)
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&User)
         {
            Send(each_obj,@MsgSendUser,#message_rsc=InstancePortal_closed);
         }
      }

      oDestRoom = Send(SYS,@FindRoomByNum,#num=piDestRID);
      if oDestRoom <> $
      {
         Send(oDestRoom,@Delete);
      }
   
      propagate;
   }

   ShowDesc()
   {
      local rName;

      rName = Send(Send(SYS,@FindRoomByNum,#num=piBaseRID),@GetName);

      ClearTempString();
      AppendTempString(InstancePortal_desc_rsc);
      AppendTempString(rName);
      AppendTempString(InstancePortal_desc2_rsc);
      AppendTempString(piExperienceMod);
      AppendTempString(InstancePortal_desc3_rsc);
      AppendTempString(piTreasureMod);
      AppendTempString(InstancePortal_desc4_rsc);
      AppendTempString(psMonsterName);
      AppendTempString(InstancePortal_desc5_rsc);

      AddPacket(4,vrDesc,4,GetTempString());
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
